#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import warnings
import cx_Oracle
import sqlalchemy as sqla
import sqlalchemy.exc
import pandas as pd
import time


# This class allows a user to query the Oracle Database as well as retrieve/write tables through pandas data frames.
class OracleAPI:
    conn = None
    cursor = None
    conn_str = None
    engine = None
    username = None
    password = None
    server = None
    port = None
    database = None

    # Initialization of class. Requires the object be created with your credentials to log into Oracle DB
    def __init__(self, username, password, server, port, database):
        # Please fill out your oracle connection string. You can use a TNS that has already been defined.
        self.username = username
        self.password = password
        self.server = server
        self.port = port
        self.database = database
        self.conn_str = str(self.username) + '/' + str(self.password) + f'@{self.server}:{self.port}/{self.database}'
        self.conn = cx_Oracle.connect(self.conn_str)
        self.cursor = self.conn.cursor()
        # print(self.conn_str)
        # print(self.conn)
        print("Connected to Oracle Database version: ", self.conn.version)
        self.cursor.execute("ALTER SESSION SET NLS_DATE_FORMAT = 'MM/DD/YYYY'")
        self.create_sqlalchemy_engine()

    # Method to select
    def get_query(self, query):
        try:
            queried_list = []
            print("Executing SELECT Query")
            start = time.time()
            self.cursor.execute(query)
            for row in self.cursor:
                queried_list.append(str(row))
                print(str(row))
            end = time.time()
            print("Time to Complete Task: " + str(end - start) + " seconds")
            return queried_list
        except cx_Oracle.DatabaseError as Exception_e:
            print("Query Returned an error, please review your query.\nAdditional Error Information: ", Exception_e)

    # Method to insert
    def insert_query(self, query):
        try:
            print("Executing INSERT Query")
            start = time.time()
            self.cursor.execute(query)
            print("Query Executed")
            self.conn.commit()
            end = time.time()
            print("Time to Complete Task: " + str(end - start) + " seconds")
        except cx_Oracle.DatabaseError as Exception_e:
            print("Query Returned an error, please review your query.\nAdditional Error Information: ", Exception_e)

    # Method to create a table
    def create_table(self, query):
        try:
            print("Executing CREATE TABLE Query")
            start = time.time()
            self.cursor.execute(query)
            print("Query Executed")
            self.conn.commit()
            end = time.time()
            print("Time to Complete Task: ", end - start)
        except cx_Oracle.DatabaseError as Exception_e:
            print("Table already exists or potentially other error: ", Exception_e)

    # Method to drop a table
    def drop_table(self, query):
        print("Executing DROP TABLE Query")
        start = time.time()
        self.cursor.execute(query)
        print("Query Executed")
        self.conn.commit()
        end = time.time()
        print("Time to Complete Task: " + str(end - start) + " seconds")

    # Write DataFrame to Database
    def write_df(self, df, table_name, dtype):
        try:
            print("Writing Data Frame to Oracle Database")
            start = time.time()
            df.to_sql(table_name, self.engine, if_exists='append', index=False, dtype=dtype, chunksize=1000)
            end = time.time()
            print("Time to Complete Task: " + str(end - start) + " seconds")
        except (cx_Oracle.DatabaseError, sqla.exc.IntegrityError) as Exception_e:
            print(
                "Could Not write DataFrame to Database.\nIntegrity Error May be a result of trying to insert a primary key column that is auto-generated by the DB\nAdditional Error Information: ",
                Exception_e)

    # Read Table into DataFrame
    def read_df(self, sql):
        print("Reading Table into Pandas Data Frame")
        start = time.time()
        df = pd.read_sql(sql, self.engine)
        end = time.time()
        print("Time to Complete Task: " + str(end - start) + " seconds")
        return df

    # Obtain Data Types of Current Data Frame
    @staticmethod
    def df_dtype(df):
        print("Determining Data Types for Columns")
        return df.dtypes

    # Create a SQLAlchemy Connection Engine for Pandas.to_sql function
    def create_sqlalchemy_engine(self):
        with warnings.catch_warnings():
            warnings.simplefilter("ignore", category=sqla.exc.SAWarning)
            oracle_connection_string = 'oracle+cx_oracle://{username}:{password}@{hostname}:{port}/{database}'
            self.engine = sqla.create_engine(
                oracle_connection_string.format(
                    # Please fill out your username and password to log into the Oracle DB
                    username=self.username,
                    password=self.password,
                    hostname=self.server,
                    port=self.port,
                    database=self.database,
                ),
                max_identifier_length=255
            )

    # Close cursor and connection(self):
    def close_conn(self):
        self.cursor.close()
        self.conn.close()
